// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Church {
  id       Int        @id @default(autoincrement())
  name     String
  Ministry Ministry[]
  User     User[]

  @@map("churches")
}

model Ministry {
  id   Int    @id @default(autoincrement())
  name String

  churchId Int    @map("church_id")
  church   Church @relation(fields: [churchId], references: [id])
  Role     Role[]

  @@unique([name, churchId])
  @@map("ministries")
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  ministryId  Int           @map("ministry_id")
  ministry    Ministry      @relation(fields: [ministryId], references: [id])
  UserRoleMap UserRoleMap[]

  @@unique([name, ministryId])
  @@map("roles")
}

model User {
  id           Int     @id @default(autoincrement())
  passwordHash String  @map("password_hash")
  phoneNumber  String  @unique @map("phone_number")
  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  isAdmin      Boolean @default(false) @map("is_admin")

  churchId    Int           @map("church_id")
  church      Church        @relation(fields: [churchId], references: [id])
  UserRoleMap UserRoleMap[]

  @@map("users")
}

model UserRoleMap {
  userId Int @map("user_id")
  roleId Int @map("role_id")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
  @@map("user_role_map")
}
